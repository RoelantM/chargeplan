alias: EPEX â€“ Build Plan
mode: restart
sequence:
  - variables:
      capacity_blocks: 2
      max_same: 2
      max_discharge_hours: 2
      day_enabled: true
      night_enabled: true
      min_spread: "{{ states('input_number.epex_min_spread_eur_kwh') | float(0.08) }}"
      now_iso: "{{ now().astimezone().isoformat() }}"
      end_iso: >-
        {{ (now().astimezone().replace(hour=23, minute=59, second=59) +
        timedelta(days=1)).isoformat() }}
      prices_norm: >
        {% set raw =
        state_attr('sensor.current_electricity_price_all_in','prices') |
        default([]) %} {% set ns = namespace(out=[]) %} {% for r in raw %}
          {% set ns.out = ns.out + [{
            'from': (as_local(r['from'])).isoformat(),
            'till': (as_local(r['till'])).isoformat(),
            'price': r['price'] | float
          }] %}
        {% endfor %} {{ ns.out }}
      day_pairs: >
        {% if not day_enabled %}{{ [] }}{% else %} {% set day_prices =
        prices_norm
             | selectattr('from','defined')
             | selectattr('till','defined')
             | selectattr('price','defined')
             | list %}
        {% set day_prices = day_prices
             | selectattr('from','string')
             | list %}
        {% set day = namespace(list=[]) %} {% for p in day_prices %}
          {% set f = as_datetime(p.from) %}
          {% if 10 <= f.hour < 22 %}
            {% set day.list = day.list + [p] %}
          {% endif %}
        {% endfor %} {% set day_sorted = day.list | sort(attribute='price',
        reverse=true) %} {% set top_sells = day_sorted[:max_discharge_hours] %}
        {% set out = namespace(pairs=[]) %} {% for s in top_sells %}
          {% set s_from = as_datetime(s.from) %}
          {% set candidates = day.list
               | selectattr('till','<=', s.from)
               | list %}
          {% if candidates|count > 0 %}
            {% set cheapest = (candidates | sort(attribute='price'))[0] %}
            {% set spread = (s.price|float(0)) - (cheapest.price|float(0)) %}
            {% if spread >= min_spread %}
              {% set out.pairs = out.pairs + [{
                'buy_from': cheapest.from, 'buy_till': cheapest.till, 'buy_price': cheapest.price|float,
                'sell_from': s.from, 'sell_till': s.till, 'sell_price': s.price|float,
                'spread': spread
              }] %}
            {% endif %}
          {% endif %}
        {% endfor %} {{ out.pairs | sort(attribute='spread', reverse=true) }} {%
        endif %}
      night_pairs: >
        {% if not night_enabled %}{{ [] }}{% else %} {% set all = prices_norm %}
        {% set morning = namespace(sells=[]) %} {% for p in all %}
          {% set f = as_datetime(p.from) %}
          {% if 7 <= f.hour < 10 %}
            {% set morning.sells = morning.sells + [p] %}
          {% endif %}
        {% endfor %} {% set top_morning = (morning.sells |
        sort(attribute='price', reverse=true))[:max_discharge_hours] %} {% set
        out = namespace(pairs=[]) %} {% for s in top_morning %}
          {% set s_from_dt = as_datetime(s.from) %}
          {% set night_start_dt = (s_from_dt - timedelta(days=1)).replace(hour=22, minute=0, second=0, microsecond=0) %}
          {% set buy_candidates = [] %}
          {% for b in all %}
            {% set b_from_dt = as_datetime(b.from) %}
            {% set b_till_dt = as_datetime(b.till) %}
            {% if b_from_dt >= night_start_dt and b_till_dt <= s_from_dt %}
              {% set buy_candidates = buy_candidates + [b] %}
            {% endif %}
          {% endfor %}
          {% if buy_candidates|count > 0 %}
            {% set cheapest = (buy_candidates | sort(attribute='price'))[0] %}
            {% set spread = (s.price|float(0)) - (cheapest.price|float(0)) %}
            {% if spread >= min_spread %}
              {% set out.pairs = out.pairs + [{
                'buy_from': cheapest.from, 'buy_till': cheapest.till, 'buy_price': cheapest.price|float,
                'sell_from': s.from, 'sell_till': s.till, 'sell_price': s.price|float,
                'spread': spread
              }] %}
            {% endif %}
          {% endif %}
        {% endfor %} {{ out.pairs | sort(attribute='spread', reverse=true) }} {%
        endif %}
      top_pairs: >
        {% set merged = (day_pairs + night_pairs) | sort(attribute='spread',
        reverse=true) %} {% set chosen = namespace(list=[]) %} {% for p in
        merged %}
          {% set b_from = p.buy_from %}{% set b_till = p.buy_till %}
          {% set s_from = p.sell_from %}{% set s_till = p.sell_till %}
          {% set ob = chosen.list | selectattr('sell_from','<', b_till) | selectattr('sell_till','>', b_from) | list %}
          {% set os = chosen.list | selectattr('buy_from','<', s_till) | selectattr('buy_till','>', s_from) | list %}
          {% set bb = chosen.list | selectattr('buy_from','<', b_till) | selectattr('buy_till','>', b_from) | list %}
          {% set ss = chosen.list | selectattr('sell_from','<', s_till) | selectattr('sell_till','>', s_from) | list %}
          {% if (ob|count == 0) and (os|count == 0) and (bb|count == 0) and (ss|count == 0) %}
            {% set chosen.list = chosen.list + [p] %}
          {% endif %}
          {% if chosen.list|count >= 12 %}{% break %}{% endif %}
        {% endfor %} {{ chosen.list }}
      tokens_raw: |
        {% set ns = namespace(toks=[]) %} {% for p in top_pairs %}
          {% set ns.toks = ns.toks + [
            {'start': p.buy_from,  'end': p.buy_till,  'act': 'C', 'price': p.buy_price},
            {'start': p.sell_from, 'end': p.sell_till, 'act': 'D', 'price': p.sell_price}
          ] %}
        {% endfor %} {{ ns.toks }}
      tokens_keep: >
        {% set ns = namespace(out=[], inv=0, last='', streak=0) %} {% for t in
        tokens_raw %}
          {% if t.act == ns.last %}
            {% set ns.streak = ns.streak + 1 %}
          {% else %}
            {% set ns.streak = 1 %}
            {% set ns.last = t.act %}
          {% endif %}
          {% if t.act == 'C' %}
            {% if ns.inv < capacity_blocks and ns.streak <= max_same %}
              {% set ns.inv = ns.inv + 1 %}
              {% set ns.out = ns.out + [t] %}
            {% endif %}
          {% else %}
            {% if ns.inv > 0 and ns.streak <= max_same %}
              {% set ns.inv = ns.inv - 1 %}
              {% set ns.out = ns.out + [t] %}
            {% endif %}
          {% endif %}
        {% endfor %} {{ ns.out }}
      all_tokens: |
        {% set ns = namespace(out=[]) %} {% for t in tokens_keep %}
          {% set s = t.start %}
          {% set e = t.end %}
          {% set tok = s[2:4] ~ s[5:7] ~ s[8:10] ~ s[11:13] ~ '-' ~ e[11:13] ~ t.act %}
          {% set ns.out = ns.out + [tok] %}
        {% endfor %} {{ ns.out }}
      compact: >
        {% set ns = namespace(out=[]) %} {% set total = 0 %} {% for tok in
        all_tokens %}
          {% set add = tok|length + (0 if ns.out|length==0 else 1) %}
          {% if total + add <= 255 %}
            {% set ns.out = ns.out + [tok] %}
            {% set total = total + add %}
          {% else %}
            {% break %}
          {% endif %}
        {% endfor %} {{ ns.out | join(';') }}
  - action: input_text.set_value
    data:
      entity_id: input_text.epex_plan_proposed_compact
      value: "{{ compact }}"
